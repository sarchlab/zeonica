// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/sim (interfaces: Connection,Component)
//
// Generated by this command:
//
//	mockgen -write_package_comment=false -package=core_test -destination=mock_sim_test.go github.com/sarchlab/akita/v4/sim Connection,Component
//

package core_test

import (
	reflect "reflect"

	sim "github.com/sarchlab/akita/v4/sim"
	gomock "go.uber.org/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// AcceptHook mocks base method.
func (m *MockConnection) AcceptHook(hook sim.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AcceptHook", hook)
}

// AcceptHook indicates an expected call of AcceptHook.
func (mr *MockConnectionMockRecorder) AcceptHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptHook", reflect.TypeOf((*MockConnection)(nil).AcceptHook), hook)
}

// Hooks mocks base method.
func (m *MockConnection) Hooks() []sim.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hooks")
	ret0, _ := ret[0].([]sim.Hook)
	return ret0
}

// Hooks indicates an expected call of Hooks.
func (mr *MockConnectionMockRecorder) Hooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hooks", reflect.TypeOf((*MockConnection)(nil).Hooks))
}

// Name mocks base method.
func (m *MockConnection) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConnectionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConnection)(nil).Name))
}

// NotifyAvailable mocks base method.
func (m *MockConnection) NotifyAvailable(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAvailable", port)
}

// NotifyAvailable indicates an expected call of NotifyAvailable.
func (mr *MockConnectionMockRecorder) NotifyAvailable(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAvailable", reflect.TypeOf((*MockConnection)(nil).NotifyAvailable), port)
}

// NotifySend mocks base method.
func (m *MockConnection) NotifySend() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifySend")
}

// NotifySend indicates an expected call of NotifySend.
func (mr *MockConnectionMockRecorder) NotifySend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySend", reflect.TypeOf((*MockConnection)(nil).NotifySend))
}

// NumHooks mocks base method.
func (m *MockConnection) NumHooks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumHooks")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumHooks indicates an expected call of NumHooks.
func (mr *MockConnectionMockRecorder) NumHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumHooks", reflect.TypeOf((*MockConnection)(nil).NumHooks))
}

// PlugIn mocks base method.
func (m *MockConnection) PlugIn(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PlugIn", port)
}

// PlugIn indicates an expected call of PlugIn.
func (mr *MockConnectionMockRecorder) PlugIn(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlugIn", reflect.TypeOf((*MockConnection)(nil).PlugIn), port)
}

// Unplug mocks base method.
func (m *MockConnection) Unplug(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unplug", port)
}

// Unplug indicates an expected call of Unplug.
func (mr *MockConnectionMockRecorder) Unplug(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unplug", reflect.TypeOf((*MockConnection)(nil).Unplug), port)
}

// MockComponent is a mock of Component interface.
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
	isgomock struct{}
}

// MockComponentMockRecorder is the mock recorder for MockComponent.
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance.
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// AcceptHook mocks base method.
func (m *MockComponent) AcceptHook(hook sim.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AcceptHook", hook)
}

// AcceptHook indicates an expected call of AcceptHook.
func (mr *MockComponentMockRecorder) AcceptHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptHook", reflect.TypeOf((*MockComponent)(nil).AcceptHook), hook)
}

// AddPort mocks base method.
func (m *MockComponent) AddPort(name string, port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPort", name, port)
}

// AddPort indicates an expected call of AddPort.
func (mr *MockComponentMockRecorder) AddPort(name, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPort", reflect.TypeOf((*MockComponent)(nil).AddPort), name, port)
}

// GetPortByName mocks base method.
func (m *MockComponent) GetPortByName(name string) sim.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortByName", name)
	ret0, _ := ret[0].(sim.Port)
	return ret0
}

// GetPortByName indicates an expected call of GetPortByName.
func (mr *MockComponentMockRecorder) GetPortByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortByName", reflect.TypeOf((*MockComponent)(nil).GetPortByName), name)
}

// Handle mocks base method.
func (m *MockComponent) Handle(e sim.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockComponentMockRecorder) Handle(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockComponent)(nil).Handle), e)
}

// Hooks mocks base method.
func (m *MockComponent) Hooks() []sim.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hooks")
	ret0, _ := ret[0].([]sim.Hook)
	return ret0
}

// Hooks indicates an expected call of Hooks.
func (mr *MockComponentMockRecorder) Hooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hooks", reflect.TypeOf((*MockComponent)(nil).Hooks))
}

// Name mocks base method.
func (m *MockComponent) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockComponentMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockComponent)(nil).Name))
}

// NotifyPortFree mocks base method.
func (m *MockComponent) NotifyPortFree(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyPortFree", port)
}

// NotifyPortFree indicates an expected call of NotifyPortFree.
func (mr *MockComponentMockRecorder) NotifyPortFree(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPortFree", reflect.TypeOf((*MockComponent)(nil).NotifyPortFree), port)
}

// NotifyRecv mocks base method.
func (m *MockComponent) NotifyRecv(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyRecv", port)
}

// NotifyRecv indicates an expected call of NotifyRecv.
func (mr *MockComponentMockRecorder) NotifyRecv(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecv", reflect.TypeOf((*MockComponent)(nil).NotifyRecv), port)
}

// NumHooks mocks base method.
func (m *MockComponent) NumHooks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumHooks")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumHooks indicates an expected call of NumHooks.
func (mr *MockComponentMockRecorder) NumHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumHooks", reflect.TypeOf((*MockComponent)(nil).NumHooks))
}

// Ports mocks base method.
func (m *MockComponent) Ports() []sim.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ports")
	ret0, _ := ret[0].([]sim.Port)
	return ret0
}

// Ports indicates an expected call of Ports.
func (mr *MockComponentMockRecorder) Ports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ports", reflect.TypeOf((*MockComponent)(nil).Ports))
}
